<?php

namespace App\Models\Cartera;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Builder;
use App\Models\Niif\NfNiif;
use App\Models\Niif\NfCencosto;
use App\Models\Cartera\CrCliente;
use OwenIt\Auditing\Contracts\Auditable;
use Jedrzej\Pimpable\PimpableTrait;
use Jedrzej\Searchable\Constraint;

class CrCuentasxcobrar extends Model implements Auditable
{
    use \OwenIt\Auditing\Auditable;
    use PimpableTrait;

    protected $fillable = [
        'consecutivo',
        'cr_cliente_id',
        'creditos',
        'debitos',
        'estado',
        'fecha',
        'fecha_factura',
        'fecha_vencimiento',
        'nf_cencosto_id',
        'nf_niif_id',
        'numero_factura',
        'observaciones',
        'plazo',
        'valor',
        'detalle_anulacion'
    ];
    protected $searchable = ['search'];
    protected $hidden = ['created_at','updated_at'];

    public function detalles () {
        return $this->hasMany(CrConceptoCuentasxcobrar::class,'cr_cuentaxcobrar_id');
    }

    public function niif (){
        return $this->belongsTo(NfNiif::class,'nf_niif_id');
    }
    public function cliente (){
        return $this->belongsTo(CrCliente::class,'cr_cliente_id');
    }
    public function cencosto (){
        return $this->belongsTo(NfCencosto::class,'nf_cencosto_id');
    }
    protected function processSearchFilter(Builder $builder, Constraint $constraint) {
        // this logic should happen for LIKE/EQUAL operators only
        if ($constraint->getOperator() === Constraint::OPERATOR_LIKE || $constraint->getOperator() === Constraint::OPERATOR_EQUAL) {
            $builder->where(function($query) use ($constraint){
            	$query->where('consecutivo',$constraint->getOperator(),$constraint->getValue())
                        ->orWhere('numero_factura', $constraint->getOperator(), $constraint->getValue())
                        ->orWhere('fecha', $constraint->getOperator(), $constraint->getValue())
                        ->orWhere('fecha_factura', $constraint->getOperator(), $constraint->getValue());
            });
            return true;
        }
        return false;
    }

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        CrCuentasxcobrar::creating(function ($table){
            $table->consecutivo = CrCuentasxcobrar::max('consecutivo') + 1;
        });

    }
}
