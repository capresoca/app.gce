<?php

namespace App\Models\ContratacionEstatal;

use App\Models\General\GnMunicipio;
use App\Models\Niif\GnTercero;
use App\Models\Presupuesto\PrRubro;
use App\Models\ContratacionEstatal\CeProconminutageo;
use App\Models\Presupuesto\PrSolicitudCp;
use App\User;
use Illuminate\Database\Eloquent\Model;
use Jedrzej\Pimpable\PimpableTrait;
use OwenIt\Auditing\Contracts\Auditable;

class CeProconestprevio extends Model implements Auditable
{
    use \OwenIt\Auditing\Auditable;

    use PimpableTrait;

    protected $fillable = [
        'alt_ejecucion',
        'ce_procontractuale_id',
        'ce_tipcontratacione_id',
        'consecutivo',
        'desc_necesidad',
        'desc_tecnica',
        'esp_tecnicas',
        'fecha',
        'lugar_ejecucion',
        'plazo',
        'pos_riesgos',
        'pr_rubro_id',
        'sop_economico',
        'supervicion',
        'tipo',
        'valor',
        'productos_entregar',
        'plazo_meses',
        'plazo_dias',
        'tarifas',
        'supervisor_id',
        'estado',
        'registro',
        'reviso',
        'confirmo',
        'ce_tipocontrato_id',
        'descripgarantias',
        'desc_plazo'
    ];

    protected $hidden = ['created_at', 'updated_at'];
    public $sortable = ['consecutivo'];
    public $searchable = ['consecutivo', 'search'];

    public function getSortableAttributes()
    {
        return ['consecutivo'];
    }

    public function funcionario_registro()
    {
        return $this->belongsTo(User::class, 'registro');
    }

    public function funcionario_reviso()
    {
        return $this->belongsTo(User::class, 'reviso');
    }

    public function funcionario_confirmo()
    {
        return $this->belongsTo(User::class, 'confirmo');
    }

    public function proconminutageos()
    {
        return $this->hasMany(CeProconminutageo::class, 'ce_proconestprevio_id');
    }

    public function solicitudCdp()
    {
        return $this->hasOne(PrSolicitudCp::class, 'ce_proconestudioprevio_id');
    }

    public function supervisor()
    {
        return $this->belongsTo(CeSupervisore::class, 'supervisor_id');
    }

    public function actividades()
    {
        return $this->hasMany(CeEstpreactividade::class, 'ce_proconestprevio_id');
    }

    public function imputacionPresupuestal()
    {
        return $this->hasMany(CeImputacionEstprevio::class, 'ce_estprevio_id');
    }

    public function forpagos()
    {
        return $this->hasMany(CeEstpreforpago::class, 'ce_proconestprevio_id');
    }

    public function garantias()
    {
        return $this->hasMany(CeEstpregarantia::class, 'ce_proconestprevio_id');
    }

    public function tipoContratacion()
    {
        return $this->belongsTo(CeTipcontratacione::class, 'ce_tipcontratacione_id');
    }

    public function proceso()
    {
        return $this->belongsTo(CeProcontractuale::class, 'ce_procontractuale_id');
    }

    public function modalidad()
    {
        return $this->belongsTo(CeTipocontrato::class, 'ce_tipocontrato_id');
    }

    public function allRelations()
    {
        return [
            'actividades',
            'forpagos',
            'garantias',
            'garantias.garantia',
            'imputacionPresupuestal.strgasto.rubro',
            'modalidad',
            'proconminutageos',
            'proconminutageos.municipio',
            'proconminutageos.upcedades',
            'proconminutageos.upcedades.rangoupc',
            'proconminutageos.upcservicios',
            'proconminutageos.upcservicios.servicio',
            'solicitudCdp',
            'supervisor',
            'tipoContratacion'
        ];
    }

    public function getValorContratoAttribute()
    {
        $imputacion_presupuestal = $this->imputacionPresupuestal;
        $valor_contrato = 0;

        foreach ($imputacion_presupuestal as $rubro) {
            $valor_contrato += $rubro->valor;
        }

        return $valor_contrato;
    }

    public function getSearchableAttributes()
    {
        return ['consecutivo', 'search'];
    }

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        CeProconestprevio::creating(function ($table) {
            $table->consecutivo = CeProconestprevio::max('consecutivo') + 1;
        });

    }
}
