<?php

namespace App\Models\TalentoHumano;

use App\User;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Auth;
use Jedrzej\Pimpable\PimpableTrait;
use Jedrzej\Searchable\Constraint;
use OwenIt\Auditing\Contracts\Auditable;

class ScLiquidacionNominaEncabezado extends Model implements Auditable
{
    use \OwenIt\Auditing\Auditable;
    use PimpableTrait;
    protected $table = 'sc_liquidacion_nomina_encabezado';
    protected $primaryKey = 'liquidacion_nomina';
    protected $fillable = [
        'descripcion',
        'observacion',
        'ano',
        'mes',
        'periodo',
        'centro_costo',
        'area',
        'dependencia',
        'fecha',
        'estado',
        'empresa',
        'usuario',
        'liquidacion_operador',
        'sw_prima',
        'sw_interes_cesantia',
        'consecutivo_saldo',
        'documento_nota',
        'cuenta_nomina',
        'valor_nomina',
        'tipo_nomina',
        'fecha_inicio_prima',
        'fecha_fin_prima'
    ];
    protected $searchable = ['search'];
    protected $appends = ['usuario_registra'];
    public $timestamps = false;


    public function tbarea ()
    {
        return $this->belongsTo(TbArea::class,'area');
    }

    public function cencosto ()
    {
        return $this->belongsTo(TbCentroConsto::class,'centro_costo');
    }

    public function tbdependencia ()
    {
        return $this->belongsTo(TbDependencia::class,'dependencia');
    }

    public function getUsuarioRegistraAttribute () {
        return collect(User::where('id',((int) $this->attributes['usuario']))->first());
    }

    protected function processSearchFilter(Builder $builder, Constraint $constraint) {
        // this logic should happen for LIKE/EQUAL operators only
        if ($constraint->getOperator() === Constraint::OPERATOR_LIKE || $constraint->getOperator() === Constraint::OPERATOR_EQUAL) {
            $builder->where('observacion', $constraint->getOperator(), $constraint->getValue())
                    ->orWhere('descripcion', $constraint->getOperator(), $constraint->getValue())
                    ->orWhere('liquidacion_nomina', $constraint->getOperator(), $constraint->getValue());
            return true;
        }
        return false;
    }

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::creating(function ($table){
            if(Auth::user()){
                $table->usuario  = Auth::user()->id;
            }
        });

    }

}
