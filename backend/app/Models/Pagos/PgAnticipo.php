<?php

namespace App\Models\Pagos;

use App\Models\Niif\GnTercero;
use App\Models\Niif\NfCencosto;
use App\Models\Niif\NfNiif;
use App\Models\Tesoreria\TsConceptoegresoDetalle;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Jedrzej\Pimpable\PimpableTrait;
use Jedrzej\Searchable\Constraint;
use OwenIt\Auditing\Contracts\Auditable;

class PgAnticipo extends Model implements Auditable
{
    use \OwenIt\Auditing\Auditable;
    use PimpableTrait;
    protected $fillable = [
        'consecutivo',
        'gn_tercero_id',
        'observacion',
        'estado_documento',
        'fecha_documento',
        'nf_niifanticipo_id',
        'nf_cencosto_id',
        'ts_concepoegreso_detalle_id',
        'valor',
        'pg_saldoinicial_id',
        'origen'
    ];

    protected $searchable = ['search','origen'];

    public function tercero()
    {
        return $this->belongsTo(GnTercero::class, 'gn_tercero_id');
    }

    public function cuenta () {
        return $this->belongsTo(NfNiif::class, 'nf_niifanticipo_id');
    }

    public function cencosto () {
        return $this->belongsTo(NfCencosto::class,'nf_cencosto_id');
    }

    public function comEgreso()
    {
        return $this->belongsTo(TsConceptoegresoDetalle::class, 'ts_concepoegreso_detalle_id');
    }

    public function saldoIncial () {
        return $this->belongsTo(PgSaliniciale::class, 'pg_saldoinicial_id');
    }

    protected function processSearchFilter(Builder $builder, Constraint $constraint)
    {
        // this logic should happen for LIKE/EQUAL operators only

        if ($constraint->getOperator() === Constraint::OPERATOR_LIKE || $constraint->getOperator() === Constraint::OPERATOR_EQUAL) {
            $builder->where(function ($query) use ($constraint){
                $query->whereHas('tercero', function ($query) use ($constraint) {
                    $query->where('nombre_completo',$constraint->getOperator(), $constraint->getValue())
                    ->orWhere('identificacion',$constraint->getOperator(), $constraint->getValue());
                })->orWhere('observacion',$constraint->getOperator(), $constraint->getValue())
                ->orWhere('consecutivo', $constraint->getOperator(), $constraint->getValue());
            });

            return true;
        }

        // default logic should be executed otherwise
        return false;
    }

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        PgAnticipo::creating(function ($table){
            $table->consecutivo  = PgAnticipo::max('consecutivo') + 1;
        });

    }
}
