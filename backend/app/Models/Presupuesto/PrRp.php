<?php

namespace App\Models\Presupuesto;

use App\Models\ContratacionEstatal\CeProconminuta;
use App\Models\Niif\GnTercero;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Auth;
use Jedrzej\Pimpable\PimpableTrait;
use Jedrzej\Searchable\Constraint;
use OwenIt\Auditing\Contracts\Auditable;

class PrRp extends Model implements Auditable
{
    use \OwenIt\Auditing\Auditable;
    use PimpableTrait;
    protected $table = 'pr_rps';
    protected $fillable = [
        'periodo',
        'consecutivo',
        'fecha',
        'plazo',
        'fecha_vence',
        'valor_compromiso',
        'pr_cdp_id',
        'gn_tercero_id',
        'tipo',
        'observaciones',
        'ce_proconminuta_id',
        'pr_strgasto_id',
        'estado',
        'gs_usuario_id',
        'afectar_cdp_xcompra',
        'pr_entidad_resolucion_id',
        'concepto_anulacionint',
        'fecha_anulacion'
    ];
    protected $hidden = ['created_at', 'updated_at'];
    protected $sortable = ['consecutivo', 'fecha'];
    protected $searchable = ['valor_compromiso', 'estado', 'search'];

    protected function getSortableAttributes() {
        return ['consecutivo', 'fecha'];
    }

    public function detalles ()
    {
        return $this->hasMany(PrDetrp::class, 'pr_rp_id');
    }

    public function cdp () {
        return $this->belongsTo(PrCdp::class, 'pr_cdp_id');
    }

    public function minuta () {
        return $this->belongsTo(CeProconminuta::class, 'ce_proconminuta_id');
    }

    public function tercero ()
    {
        return $this->belongsTo(GnTercero::class, 'gn_tercero_id');
    }

    public function presupuestoInicialGasto ()
    {
        return $this->belongsTo(PrStrgasto::class,'pr_strgasto_id');
    }

    public function entidadResolucion () {
        return $this->belongsTo(PrEntidadResolucione::class ,'pr_entidad_resolucion_id');
    }

    protected function processSearchFilter(Builder $builder, Constraint $constraint)
    {
        // this logic should happen for LIKE/EQUAL operators only

        if ($constraint->getOperator() === Constraint::OPERATOR_LIKE || $constraint->getOperator() === Constraint::OPERATOR_EQUAL) {
            $builder->where(function ($query) use ($constraint) {
                $query->whereHas('tercero', function ($query) use ($constraint) {
                    $query->where('identificacion', $constraint->getOperator(), $constraint->getValue())
                        ->orWhere('nombre1', $constraint->getOperator(), $constraint->getValue())
                        ->orWhere('nombre2', $constraint->getOperator(), $constraint->getValue())
                        ->orWhere('apellido1', $constraint->getOperator(), $constraint->getValue())
                        ->orWhere('apellido2', $constraint->getOperator(), $constraint->getValue())
                        ->orWhere('nombre_completo', $constraint->getOperator(), $constraint->getValue());
                });
            })->orWhere('consecutivo', $constraint->getOperator(), $constraint->getValue())
                ->orWhere('observaciones', $constraint->getOperator(), $constraint->getValue())
                ->orWhere('estado', $constraint->getOperator(), $constraint->getValue())
                ->orWhere('tipo', $constraint->getOperator(), $constraint->getValue())
                ->orWhere('periodo', $constraint->getOperator(), $constraint->getValue());
            return true;
        }
        // default logic should be executed otherwise
        return false;
    }

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        PrRp::creating(function ($table){
            if(Auth::user()){
                $table->gs_usuario_id = Auth::user()->id;
                $table->consecutivo  = PrRp::max('consecutivo') + 1;
            }
        });

    }

}
