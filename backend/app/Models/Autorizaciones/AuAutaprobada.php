<?php

namespace App\Models\Autorizaciones;

use App\Models\RedServicios\RsPlanescobertura;
use App\User;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Auth;
use Jedrzej\Pimpable\PimpableTrait;
use Jedrzej\Searchable\Constraint;

class AuAutaprobada extends Model
{
    use PimpableTrait;

    protected $fillable = [
        'consecutivo',
        'destino',
        'rs_contrato_id',
        'au_autorizacion_id',
        'au_autsolicitud_id',
        'gs_usuario_id',
        'estado',
        'valor_total',
        'valor_usuario'
    ];

    protected $appends = ['valor_total','valor_tot_user'];
    protected $searchable = ['search'];

    public function detalles()
    {
        return $this->hasMany(AuAutdetalle::class, 'au_autaprobada_id');
    }
    public function plan(){
        return $this->belongsTo(RsPlanescobertura::class, 'rs_contrato_id');
    }

    public function solicitud()
    {
        return $this->belongsTo(AuAutsolicitude::class, 'au_autsolicitud_id');
    }

    public function usuario(){
        return $this->belongsTo(User::class, 'gs_usuario_id');
    }
    public function anula(){
        return $this->belongsTo(User::class, 'user_anula_id');
    }

    public function autorizacion()
    {
        return $this->belongsTo(AuAutorizacione::class, 'au_autorizacion_id');
    }

    public function getValorTotalAttribute () {
        $valores = AuAutdetalle::where('au_autaprobada_id', $this->id)->get();
        $valorTotal1 = 0;
        foreach ($valores as $resultado) {
            $valorTotal = $resultado->valor * $resultado->cantidad_aprobada;
            $valorTotal1 += $valorTotal;
        }
        return $valorTotal1;
    }

    public function getValorTotUserAttribute () {
//        return 'algo';
        $valores = AuAutdetalle::where('au_autaprobada_id', $this->id)->get();
        $valorTotal2 = 0;
        foreach ($valores as $resultado) {
            $valorTotal = $resultado->valor_usuario * $resultado->cantidad_aprobada;
            $valorTotal2 += $valorTotal;
        }
        return $valorTotal2;
    }

    protected function processSearchFilter(Builder $builder, Constraint $constraint)
    {
        // this logic should happen for LIKE/EQUAL operators only
        if ($constraint->getOperator() === Constraint::OPERATOR_LIKE || $constraint->getOperator() === Constraint::OPERATOR_EQUAL) {
            $builder->whereHas('autorizacion.afiliado', function ($query) use ($constraint){
                $query->where('nombre_completo', $constraint->getOperator(), $constraint->getValue())
                    ->orWhere('identificacion', $constraint->getOperator(), $constraint->getValue());
            });

            return true;
        }

        // default logic should be executed otherwise
        return false;
    }

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        AuAutaprobada::creating(function ($table){
            if(Auth::user()){
                $table->gs_usuario_id  = Auth::user()->id;
            }

            $table->consecutivo = AuAutaprobada::max('consecutivo') + 1;
            $table->estado = 'Activa';

        });

    }


}
