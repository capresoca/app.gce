<?php

namespace App\Models\RecCompensacion;

use Carbon\Carbon;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Input;
use Jedrzej\Pimpable\PimpableTrait;
use Jedrzej\Searchable\Constraint;
use Jenssegers\Date\Date;
use OwenIt\Auditing\Contracts\Auditable;

/**
 * @author Jorge Eduardo HernÃ¡ndez Oropeza 08/05/2020
 * Creando Soluciones Informaticas LTDA
 *
 * Class RecLogBancarioEncabezado
 * @package App\Models\RecCompensacion
 */

class RecLogBancarioEncabezado extends Model implements Auditable
{
    use \OwenIt\Auditing\Auditable;
    use PimpableTrait;
    protected $primaryKey = 'consecutivo_log_bancario_encabezado';
    protected $fillable = [
        'cantidad_archivos',
        'estado',
        'fecha_cargue',
        'fecha_descarga',
        'fecha_grabado',
        'fecha_pago',
        'lin_periodo_liquidacion',
        'nombre_archivo',
        'tipo_archivo',
        'usuario_grabado'
    ];

    protected $searchable = ['search'];

    protected function processSearchFilter(Builder $builder, Constraint $constraint)
    {
        // this logic should happen for LIKE/EQUAL operators only
        if ($constraint->getOperator() === Constraint::OPERATOR_LIKE || $constraint->getOperator() === Constraint::OPERATOR_EQUAL) {

            $coleccion = json_decode(Input::get('collection'),true);

            $builder->when($coleccion, function ($query) use ($constraint, $coleccion) {
                if (!is_null($coleccion['fecha_inicio']) && is_null($coleccion['fecha_fin'])) {
                    $query->where('fecha_pago', '>=', $coleccion['fecha_inicio']);
                }

                if (is_null($coleccion['fecha_inicio']) && !is_null($coleccion['fecha_fin'])) {
                    $query->where('fecha_pago', '<=', $coleccion['fecha_fin']);
                }

                if (!is_null($coleccion['fecha_inicio']) && !is_null($coleccion['fecha_fin'])) {
                    $fechaIni = Carbon::parse($coleccion['fecha_inicio']);
                    $fechaFin = Carbon::parse($coleccion['fecha_fin']);
                    $query->whereBetween('fecha_pago',[$fechaIni, $fechaFin]);
                }

                if (!is_null($coleccion['tipo_archivo'])) {
                    $query->where('tipo_archivo', '=',$coleccion['tipo_archivo']);
                }
            });
            return true;
        }
        // default logic should be executed otherwise
        return false;
    }

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::saving(function ($table){
            if(Auth::user()){
                $table->usuario_grabado  = Auth::user()->id;
                $table->fecha_grabado = Date::now()->toDateString();
            }
        });
    }
}
