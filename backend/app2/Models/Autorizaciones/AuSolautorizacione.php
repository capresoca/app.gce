<?php

namespace App\Models\Autorizaciones;

use App\Models\Aseguramiento\AsAfiliado;
use App\Models\Aseguramiento\AsRegimene;
use App\Models\OficinaJuridica\OjTutela;
use App\Models\RedServicios\RsCie10;
use App\Models\RedServicios\RsEntidade;
use App\Models\RedServicios\RsPlancobertura;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Auth;
use Jedrzej\Pimpable\PimpableTrait;
use Jedrzej\Searchable\Constraint;
use OwenIt\Auditing\Contracts\Auditable;

class AuSolautorizacione extends Model implements Auditable
{
    use \OwenIt\Auditing\Auditable;
    use PimpableTrait;

    protected $fillable = [
        'tipo_aprobacion',
        'rs_plancobertura_id',
        'consecutivo',
        'fecha',
        'fecha_ordmedica',
        'au_autorizacion_id',
        'as_afiliado_id',
        'as_regimen_id',
        'tipo_origen',
        'rs_entorigen_id',
        'rs_cie10_id',
        'rs_entdestino_id',
        'au_modservicio_id',
        'au_servicio_id',
        'alto_costo',
        'tutela',
        'tipo_autorizacion',
        'gs_usuario_id',
        'gs_usuprocesa_id',
        'observaciones',
        'estado',
    ];
    protected $hidden = ['created_at', 'updated_at'];

    protected $searchable = ['search', 'consecutivo'];

    public function detalles () {
        return $this->hasMany(AuDetsolautorizacione::class,'au_solautorizacion_id');
    }

    public function afiliado ()
    {
        return $this->belongsTo(AsAfiliado::class, 'as_afiliado_id');
    }

    public function regimen()
    {
        return $this->belongsTo(AsRegimene::class, 'as_regimen_id');
    }

    public function entidadOrigen()
    {
        return $this->belongsTo(RsEntidade::class, 'rs_entorigen_id');
    }

    public function cie10 () {
        return $this->belongsTo(RsCie10::class,'rs_cie10_id');
    }

    public function entidadDestino () {
        return $this->belongsTo(RsEntidade::class, 'rs_entdestino_id');
    }

    public function modservicio () {
        return $this->belongsTo(AuModservicio::class, 'au_modservicio_id');
    }

    public function servicio () {
        return $this->belongsTo(AuServicio::class, 'au_servicio_id');
    }

    public function autorizacion () {
        return $this->belongsTo(AuAutorizacione::class, 'au_autorizacion_id');
    }

    public function planCobertura () {
        return $this->belongsTo(RsPlancobertura::class, 'rs_plancobertura_id');
    }

    public function tutela()
    {
        return $this->belongsTo(OjTutela::class, 'oj_tutela_id');
    }

    public function getTipoAprobacionAttribute(){
        return $this->attributes['tipo_aprobacion'] != null ? explode(',', $this->attributes['tipo_aprobacion']) : [];
    }

    protected function processSearchFilter(Builder $builder, Constraint $constraint)
    {
        // this logic should happen for LIKE/EQUAL operators only
        if ($constraint->getOperator() === Constraint::OPERATOR_LIKE || $constraint->getOperator() === Constraint::OPERATOR_EQUAL) {
            $builder->whereHas('afiliado', function ($query) use ($constraint) {
                $search = $constraint->getValue();
                if($constraint->getOperator() === Constraint::OPERATOR_LIKE) {
                    $search = substr($constraint->getValue(),1,-1);
                }
                $query->where('identificacion', $search);
                if(!is_numeric($search)){
                    $query->orWhere('nombre_completo', 'like','%'.$search.'%');
                }
            })->orWhere('consecutivo', $constraint->getValue());
            return true;
        }
        // default logic should be executed otherwise
        return false;
    }

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        AuSolautorizacione::creating(function ($table){
            if(Auth::user()){
                $table->gs_usuario_id  = Auth::user()->id;
            }
            $table->consecutivo = AuSolautorizacione::max('consecutivo') + 1;
        });

    }

}


