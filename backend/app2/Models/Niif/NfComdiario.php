<?php

namespace App\Models\Niif;

use App\Exceptions\ComdiarioException;
use App\Models\Niif\NfMese;
use App\NfComdiarioLote;
use App\Traits\ToolsTrait;
use App\User;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Auth;
use Jedrzej\Pimpable\PimpableTrait;
use Jedrzej\Searchable\Constraint;
use OwenIt\Auditing\Contracts\Auditable;

class NfComdiario extends Model implements Auditable {
	use \OwenIt\Auditing\Auditable;
	use PimpableTrait;

	protected $fillable = [
	    'nf_tipcomdiario_id',
        'consecutivo',
        'fecha',
        'detalle',
        'estado',
        'detalle_anulacion',
        'gs_usuario_id',
        'documento'
    ];

//	protected $guarded = ['detalles', 'tipo', 'valor', 'fecha_local', 'pg_cxp_id', 'cr_cuentasxcobrar_id'];

	public function detalles() {
		return $this->hasMany(NfComdiadetalle::class, 'nf_comdiario_id');
	}

//    Configuraci칩n Buscado y Ordenaci칩n

	public $sortable = ['consecutivo', 'fecha'];
	public $searchable = ['fecha', 'consecutivo', 'detalle', 'created_at', 'search','nf_tipcomdiario_id','estado','documento'];

	public function getSortableAttributes() {
		return ['consecutivo', 'fecha'];
	}


	public function tipo() {
		return $this->belongsTo(NfTipcomdiario::class, 'nf_tipcomdiario_id');
	}

	public function getValorAttribute() {
		$credito = $this->detalles != null ? $this->detalles->sum('credito') : 0;
		$debito = $this->detalles != null ? $this->detalles->sum('debito') : 0;
		return $credito == $debito ? $debito : 'El comprobante presenta irregularidades en sus partidas.';
	}




	public static function boot() {
		parent::boot(); // TODO: Change the autogenerated stub

        NfComdiario::creating(function ($table){
            if(Auth::user()){
                $table->gs_usuario_id  = Auth::user()->id;
            }
        });

		NfComdiario::creating(function ($table) {
			$fecha = Carbon::parse($table->fecha);
			$nfMes = NfMese::where('mes', ToolsTrait::monthTraslateSpanish($fecha->month))
                ->where('year', $fecha->year)->first();
			if (is_null($nfMes)) {
				throw new ComdiarioException("No existe un mes abierto para el comprobante de diario.");
			} else {
				if ($nfMes->estado == 'Cerrado') {
					throw new ComdiarioException("No se pueden realizar movimientos El mes de " . ToolsTrait::monthTraslateSpanish($fecha->month) . " del a침o " . $fecha->year . " Se encuentra en estado Cerrado");
				}
			}
		});
		NfComdiario::updating(function ($table) {
			$fecha = Carbon::parse($table->fecha);
			$nfMes = NfMese::where('mes', ToolsTrait::monthTraslateSpanish($fecha->month))->where('year', $fecha->year)->first();
			if (is_null($nfMes)) {
				throw new ComdiarioException("No existe un mes abierto para el comprobante de diario.");
			} else {
				if ($nfMes->estado == 'Cerrado') {
					throw new ComdiarioException("No se pueden realizar movimientos El mes de " . ToolsTrait::monthTraslateSpanish($fecha->month) . " del a침o " . $fecha->year . " Se encuentra en estado Cerrado");
				}
			}
		});
	}

	public function usuario () {
	    return $this->belongsTo(User::class,'gs_usuario_id');
    }

    protected function processSearchFilter(Builder $builder, Constraint $constraint)
    {
        // this logic should happen for LIKE/EQUAL operators only

        if ($constraint->getOperator() === Constraint::OPERATOR_LIKE || $constraint->getOperator() === Constraint::OPERATOR_EQUAL) {
            $builder->where(function ($query) use ($constraint){
                $query->where('detalle','like', $constraint->getValue())
                    ->orWhere('detalle_anulacion','like',$constraint->getValue())->whereConsecutivo($constraint->getValue());
            });

            return true;
        }

        // default logic should be executed otherwise
        return false;
    }

    public function nfcomdiariolote(){
	    return $this->belongsTo(NfComdiarioLote::class);
    }
}
