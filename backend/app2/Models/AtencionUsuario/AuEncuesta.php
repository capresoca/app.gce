<?php

namespace App\Models\AtencionUsuario;

use App\Models\Aseguramiento\AsAfiliado;
use App\Models\General\GnMunicipio;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Auth;
use Jedrzej\Pimpable\PimpableTrait;
use Jedrzej\Searchable\Constraint;
use OwenIt\Auditing\Contracts\Auditable;

class AuEncuesta extends Model implements Auditable
{
    use \OwenIt\Auditing\Auditable;
    use PimpableTrait;

    protected $fillable = ['as_afiliado_id','fecha','gn_municipio_id','gs_usuario_id','lugar'];
    protected $searchable = ['nombre','identificacion','search'];


    public function respuestas () {
        return $this->hasMany(AuEncrespuesta::class, 'au_encuesta_id');
    }

    public function afiliado () {
        return $this->belongsTo(AsAfiliado::class, 'as_afiliado_id');
    }

    public function municipio () {
        return $this->belongsTo(GnMunicipio::class, 'gn_municipio_id');
    }

    protected function processSearchFilter(Builder $builder, Constraint $constraint)
    {
        // this logic should happen for LIKE/EQUAL operators only
        if ($constraint->getOperator() === Constraint::OPERATOR_LIKE || $constraint->getOperator() === Constraint::OPERATOR_EQUAL) {
            $builder->whereHas('afiliado', function ($query) use ($constraint) {
                $search = $constraint->getValue();
                if($constraint->getOperator() === Constraint::OPERATOR_LIKE) {
                    $search = substr($constraint->getValue(),1,-1);
                }
                $query->where('identificacion', $search);
                if(!is_numeric($search)){
                    $query->orWhere('nombre_completo', 'like','%'.$search.'%');
                }
            })->orWhereHas('municipio', function ($query) use ($constraint) {
               $query->where('nombre', $constraint->getOperator(), $constraint->getValue());
            });
            return true;
        }
        // default logic should be executed otherwise
        return false;
    }

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        AuEncuesta::creating(function ($table){
            if(Auth::user()){
                $table->gs_usuario_id  = Auth::user()->id;
            }
        });

    }
}
