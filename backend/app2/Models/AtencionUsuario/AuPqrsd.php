<?php

namespace App\Models\AtencionUsuario;

use App\Models\Aseguramiento\AsAfiliado;
use App\Models\General\GnArchivo;
use App\Models\General\GnMunicipio;
use App\Models\General\GnTipdocidentidade;
use App\Models\RedServicios\RsEntidade;
use App\Traits\CarbonColombia;
use App\User;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Input;
use Illuminate\Support\Facades\Log;
use Jedrzej\Pimpable\PimpableTrait;
use Jedrzej\Searchable\Constraint;

class AuPqrsd extends Model
{
    use PimpableTrait;

    protected $fillable = [
        'consecutivo',
        'tipo_usuario',
        'as_afiliado_id',
        'au_tipopqrsd_id',
        'funcionario_id',
        'user_id',
        'nombres',
        'apellidos',
        'direccion',
        'identificacion',
        'gn_tipdocidentidad_id',
        'telefono',
        'gn_municipio_id',
        'email',
        'medio_recepcion',
        'relato',
        'es_prioritaria',
        'fecha_respuesta',
        'fecha_recepcion',
        'fecha_limite',
        'plazo',
        'horas',
        'estado',
        'au_motivo_id',
        'rs_entidad_id',
        'consecutivo_externo',
        'actores',
        'soluciono_queja',
        'au_mod_servicios_pqrs_id',
        'fuente'
    ];

    protected $searchable = ['afiliado:nombre_completo','afiliado:identificacion','search', 'funcionario_id','estado'];

    protected $appends = ['dias_para_responder','asunto','dias_respuesta','respuesta_funcionario'];

    public function afiliado()
    {
        return $this->belongsTo(AsAfiliado::class,'as_afiliado_id');
    }

    public function tipo()
    {
        return $this->belongsTo(AuTipopqrsd::class, 'au_tipopqrsd_id');
    }

    public function tipo_documento(){
        return $this->belongsTo(GnTipdocidentidade::class, 'gn_tipdocidentidad_id');
    }

    public function funcionario()
    {
        return $this->belongsTo(User::class, 'user_id');
    }

    public function respuesta()
    {
        return $this->hasOne(AuRespuestapqrsd::class, 'au_pqrsd_id');
    }

    public function all_respuestas () {
        return $this->hasMany(AuRespuestapqrsd::class,'au_pqrsd_id');
    }

    public function municipio()
    {
        return $this->belongsTo(GnMunicipio::class, 'gn_municipio_id');
    }

    public function anexos()
    {
        return $this->belongsToMany(GnArchivo::class, 'au_pqrsd_archivo','au_pqrsd_id','gn_archivo_id');
    }

    public function motivo()
    {
        return $this->belongsTo(AuMotivo::class, 'au_motivo_id');
    }

    public function modservicio() {
        return $this->belongsTo(AuModServiciosPqr::class,'au_mod_servicios_pqrs_id');
    }

    public function entidad()
    {
        return $this->belongsTo(RsEntidade::class, 'rs_entidad_id');
    }

    public function getDiasParaResponderAttribute(){
        try{

            if(!$this->tipo->requiere_respuesta) return 10000;

            if($this->estado === 'Respondido') return 0;

            $fecha_vencimiento = CarbonColombia::parse($this->fecha_limite);

            $hoy = CarbonColombia::parse(today()->toDateString());

            return $hoy->diffInBussinessDays($fecha_vencimiento,false);
        }catch (\Exception $e){
            return 0;
        }
    }

    public function getEstadoAttribute(){
        if($this->respuesta && $this->attributes['estado'] != 'Respondido'){
            return 'Borrador Respuesta';
        }
        return $this->attributes['estado'];
    }

    public function getDiasRespuestaAttribute()
    {
        try{

            if(!$this->fecha_respuesta) return 'NR';
            $fecha_recepcion = CarbonColombia::parse($this->fecha_recepcion);
            $fecha_respuesta = CarbonColombia::parse($this->fecha_respuesta);

            return $fecha_recepcion->diffInBussinessDays($fecha_respuesta,false);
        }catch (\Exception $e){
            return 0;
        }
    }

    public function getAsuntoAttribute()
    {
        if(!$this->motivo){
            return substr($this->relato,0,120);
        }

        return $this->motivo;
    }


    public function getFechaRecepcionArrayAttribute()
    {
        try{
            $array = Carbon::parse($this->fecha_recepcion)->toArray();
            return $array;
        }catch (\Exception $exception)
        {
            Log::error($exception);
        }
    }


    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        AuPqrsd::creating(function ($table){
            if(Auth::user()){
                $table->user_id  = Auth::user()->id;
            }

            $table->consecutivo = AuPqrsd::max('consecutivo') + 1;
            $table->estado = 'Registrado';
        });

    }

    protected function processSearchFilter(Builder $builder, Constraint $constraint)
    {
        // this logic should happen for LIKE/EQUAL operators only
        if ($constraint->getOperator() === Constraint::OPERATOR_LIKE || $constraint->getOperator() === Constraint::OPERATOR_EQUAL) {
            $builder->where(function ($query) use($builder,$constraint){
                $search = $constraint->getValue();
                if($constraint->getOperator() === Constraint::OPERATOR_LIKE){
                    $search = substr($constraint->getValue(),1,-1);
                }
                $query->where('identificacion', 'like',$search.'%');
                if(!is_numeric($search)){
                    $query->orWhere('nombres', 'like','%'.$search.'%')
                        ->orWhere('apellidos', 'like','%'.$search.'%');
                }

            });
            return true;
        }

        // default logic should be executed otherwise
        return false;
    }


    public function scopeMacromotivoByEntidad($query,$value){
        return $query->where('au_macromotivos.id',$value)
                    ->select(
                        [
                            'rs_entidades.nombre as entidad',
                            DB::raw('count(au_pqrsds.id) as cantidad ')

                        ]
                    )->groupBy(['au_macromotivos.descripcion','rs_entidades.id'])
                    ->orderBy('cantidad','desc');

    }

    public function scopeByMacromotivo($query){
        return $query->select(DB::raw('au_macromotivos.descripcion as macromotivo, count(au_pqrsds.id) as pqrs'))
            ->groupBy('au_macromotivos.id');
    }

    public function scopeBetweenDates($query)
    {
        $inicio = Input::get('inicio');
        $fin = Input::get('fin');
        return $query->whereBetween(DB::raw('DATE(fecha_recepcion)'), array($inicio, $fin));
    }

    public function getRespuestaFuncionarioAttribute($key)
    {
        if (!isset($this->respuesta)) return null;

        $textos = array('<p>', '</p>', '&nbsp;');
        $respuesta = strip_tags($this->respuesta->respuesta);

        if (strpos($respuesta,'<p>') || strpos($respuesta,'</p>')) {
            $respuesta = str_replace($textos, "",$this->respuesta->respuesta);
        }

        return $respuesta;
    }

    public function scopeJoining($query){
        return $query->join('au_motivos','au_pqrsds.au_motivo_id','=','au_motivos.id')
                ->join ('au_motivosgenerales', 'au_motivos.au_motivogeneral_id','=','au_motivosgenerales.id')
                ->join ('au_macromotivos','au_motivosgenerales.au_macromotivo_id','=','au_macromotivos.id')
                ->join('rs_entidades','au_pqrsds.rs_entidad_id','=','rs_entidades.id');

    }

    public function scopeEnContra($query)
    {
        return $query->whereIn('actores',[
            'Afiliado contra Capresoca',
            'Afiliado contra IPS'
        ]);
    }

}



