<?php

namespace App\Models\AtencionUsuario;

use App\Models\Aseguramiento\AsAfiliado;
use App\Models\Aseguramiento\AsAfiliadoPagador;
use App\Models\General\GnArchivo;
use App\Models\Presupuesto\PrConcepto;
use App\Models\Presupuesto\PrSolicitudCp;
use App\Models\RedServicios\RsCie10;
use App\User;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Auth;
use Jedrzej\Pimpable\PimpableTrait;
use Jedrzej\Searchable\Constraint;
use OwenIt\Auditing\Contracts\Auditable;

class AuIncapacidade extends Model implements Auditable
{
    use \OwenIt\Auditing\Auditable;
    use PimpableTrait;

    protected $fillable = [
        'as_afiliados_id',
        'as_afiliado_pagador_id',
        'au_tipincapacidades_id',
        'fecha_inicio',
        'fecha_fin',
        'base_liquidacion',
        'pagar_a',
        'fecha',
        'consecutivo',
        'incapacidad_id',
        'histclinica_id',
        'certbanco_id',
        'gs_usuarios_id',
        'estado',
        'usutramita_id',
        'fecha_tramite',
        'observaciones',
        'semanas_gestacion',
        'rs_cie10_id',
        'dias_incapacidad',
        'archivo_identificacion_id',
        'dias_gestacion',
        'dias_incapacidad_total',
        'incapacidad_id',
        'total_a_pagar',
        'ibc_final',
        'valor_a_reconocer_diario',
        'dias_prematuro',
        'ibc_calculado',
        'ibc_pagado',
        'dias_calculado',
        'dias_pagado',
        'pr_rubro_id',
        'pr_solicitud_cp_id',
        'numeroDocumento'
    ];


    protected $searchable = ['search','as_afiliados_id'];

    public function solicitud () {
        return $this->belongsTo(PrSolicitudCp::class, 'pr_solicitud_cp_id');
    }

    public function rubro () {
        return $this->belongsTo(PrConcepto::class, 'pr_rubro_id');
    }

    public function tipo_incapacidad()
    {
        return $this->belongsTo(AuTipincapacidade::class, 'au_tipincapacidades_id');
    }

    public function afiliado()
    {
        return $this->belongsTo(AsAfiliado::class,'as_afiliados_id');
    }

    public function incapacidad_anterior()
    {
        return $this->belongsTo(AuIncapacidade::class, 'incapacidad_id');
    }

    public function histclinica()
    {
        return $this->belongsTo(GnArchivo::class,'histclinica_id');
    }

    public function incapacidad()
    {
        return $this->belongsTo(GnArchivo::class, 'archivo_incapacidad_id');
    }

    public function certbanco()
    {
        return $this->belongsTo(GnArchivo::class,'certbanco_id');
    }

    public function archivo_identificacion()
    {
        return $this->belongsTo(GnArchivo::class, 'archivo_identificacion_id');
    }

    public function cie10()
    {
        return $this->belongsTo(RsCie10::class, 'rs_cie10_id');
    }

    public function usuario()
    {
        return $this->belongsTo(User::class, 'gs_usuarios_id');
    }

    public function usuario_tramita()
    {
        return $this->belongsTo(User::class, 'usutramita_id');
    }

    public function relacion_laboral()
    {
        return $this->belongsTo(AsAfiliadoPagador::class, 'as_afiliado_pagador_id');
    }

    public function setDiasGestacionAttribute($value)
    {
        $this->attributes['dias_gestacion'] = (int)$value;
    }

    public function setDiasIncapacidadAttribute($value)
    {
        $this->attributes['dias_incapacidad'] = (int)$value;
    }

    public function relaciones()
    {
        return $this->load('afiliado','tipo_incapacidad.prestacion','histclinica','certbanco','incapacidad','archivo_identificacion','cie10','tipo_incapacidad.prestacion.tipos','incapacidad_anterior','rubro.detstrgasto.strGasto','solicitud');
    }

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        AuIncapacidade::creating(function ($table){
            if(Auth::user()){
                $table->gs_usuarios_id  = Auth::user()->id;
                $table->usutramita_id = Auth::user()->id;
                $table->fecha = today()->toDateString();
            }

            $conUnico = AuIncapacidade::max('consecutivo') + 1;
            $table->consecutivo = $conUnico;

            if ($table->as_afiliados_id !== null || $table->au_tipincapacidades_id !== null) {
                $afiliado = AsAfiliado::with('municipio')->find((integer) $table->as_afiliados_id);
                $tipoIncapacidad = AuTipincapacidade::with('prestacion')->find($table->au_tipincapacidades_id);
                $table->numeroDocumento = (string) $tipoIncapacidad->prestacion['nomenclatura'].$afiliado->municipio['codigo'].$conUnico;
            }
        });

    }

    protected function processSearchFilter(Builder $builder, Constraint $constraint)
    {
        // this logic should happen for LIKE/EQUAL operators only
        if ($constraint->getOperator() === Constraint::OPERATOR_LIKE || $constraint->getOperator() === Constraint::OPERATOR_EQUAL) {
            $builder->where(function ($query) use ($constraint) {
                $query->whereHas('afiliado', function ($query) use ($constraint){
                    $query->where('nombre_completo', $constraint->getOperator(), $constraint->getValue())
                        ->orWhere('identificacion', $constraint->getOperator(), $constraint->getValue());
                });
            })->orWhere('estado', $constraint->getOperator(), $constraint->getValue())
                ->orWhere('numeroDocumento', $constraint->getOperator(), $constraint->getValue());

            return true;
        }

        // default logic should be executed otherwise
        return false;
    }
}

