<?php

namespace App\Models\RedServicios;

use App\Models\Aseguramiento\AsAfiliado;
use App\Models\General\GnArchivo;
use App\Models\General\GnMunicipio;
use App\User;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Auth;
use Jedrzej\Pimpable\PimpableTrait;
use Jedrzej\Searchable\Constraint;
use OwenIt\Auditing\Contracts\Auditable;

class RsPortabilidade extends Model implements Auditable
{
    use \OwenIt\Auditing\Auditable;
    use PimpableTrait;

    protected $fillable = [
        'as_afiliado_id',
        'fecha_solicitud',
        'fecha_inicio',
        'fecha_fin',
        'munreceptor_id',
        'entidad_id',
        'direccion',
        'telefono',
        'gn_archivo_id',
        'estado',
        'gs_usuario_id',
        'usuario_tramita_id',
        'fecha_tramite',
        'observaciones',
        'motivo',
        'email'
    ];

    protected $searchable = ['search'];

    public function afiliado()
    {
        return $this->belongsTo(AsAfiliado::class,'as_afiliado_id');
    }

    public function entidad()
    {
        return $this->belongsTo(RsEntidade::class, 'entidad_id');
    }

    public function archivo()
    {
        return $this->belongsTo(GnArchivo::class, 'gn_archivo_id');
    }

    public function usuario()
    {
        return $this->belongsTo(User::class,'gs_usuario_id');
    }

    public function usuario_tramita()
    {
        return $this->belongsTo(User::class,'gs_usuario_tramita_id');
    }

    public function municipio_receptor()
    {
        return $this->belongsTo(GnMunicipio::class, 'munreceptor_id');
    }

    public function serviciosPortabilidad () {
        return $this->hasMany(RsAfiliadoServicio::class,'rs_portabilidad_id');
    }

    public function cancelPortabilidad()
    {
        return $this->hasOne(RsCancelportabilidade::class,'rs_portabilidade_id');
    }

    public function ipsGrupo()
    {
        return $this->hasOne(RsMaestroips::class,'rs_portabilidade_id');
    }

    protected function processSearchFilter(Builder $builder, Constraint $constraint)
    {
        // this logic should happen for LIKE/EQUAL operators only
        if ($constraint->getOperator() === Constraint::OPERATOR_LIKE || $constraint->getOperator() === Constraint::OPERATOR_EQUAL) {
            $builder->where(function ($query) use($builder,$constraint){
                $search = $constraint->getValue();
                if($constraint->getOperator() === Constraint::OPERATOR_LIKE){
                    $search = substr($constraint->getValue(),1,-1);
                }
                $query->where('consecutivo', '=', $search)
                    ->orWhereHas('afiliado', function ($query) use ($constraint, $search) {
                        $query->where('identificacion', '=', $search);
                    });

                if (! is_numeric($search)) {
                    $query->orWhereHas('afiliado', function ($query) use ($constraint){
                        $query->where('nombre_completo', $constraint->getOperator(), $constraint->getValue());
                    })->orWhere('motivo', $constraint->getOperator(), $constraint->getValue())
                        ->orWhere('email', $constraint->getOperator(), $constraint->getValue())
                        ->orWhere('estado', $constraint->getOperator(), $constraint->getValue());
                }

            });
            return true;
        }

        // default logic should be executed otherwise
        return false;
    }

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        RsPortabilidade::creating(function ($table){
            if(Auth::user()){
                $table->gs_usuario_id  = Auth::user()->id;
                $table->consecutivo = RsPortabilidade::max('consecutivo') + 1;
                $table->estado = 'Registrado';
            }
        });

    }

}
