<?php

namespace App\Models\AuditorCuentas;

use App\Models\CuentasMedicas\CmRadicado;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Auth;
use Jedrzej\Pimpable\PimpableTrait;
use Jedrzej\Searchable\Constraint;
use OwenIt\Auditing\Contracts\Auditable;

class AcRadicadosAsignado extends Model implements Auditable
{
    use \OwenIt\Auditing\Auditable;
    use PimpableTrait;

    protected $fillable = [
        'ac_auditor_id',
        'cm_radicado_id',
        'consecutivo',
        'tipo'
    ];

    protected $searchable = ['search','tipo'];

    public function auditor ()
    {
        return $this->belongsTo(AcAuditore::class,'ac_auditor_id');
    }

    public function radicado ()
    {
        return $this->belongsTo(CmRadicado::class, 'cm_radicado_id');
    }

    protected function processSearchFilter(Builder $builder, Constraint $constraint)
    {
        // this logic should happen for LIKE/EQUAL operators only
        if ($constraint->getOperator() === Constraint::OPERATOR_LIKE || $constraint->getOperator() === Constraint::OPERATOR_EQUAL) {
            $builder->where(function ($query) use($builder,$constraint){

                $query->whereHas('auditor.usuario',function ($query) use($builder,$constraint){
                    $query->where('name',$constraint->getOperator(),$constraint->getValue())
                        ->orWhere('identification',$constraint->getOperator(),$constraint->getValue())
                        ->orWhere('email',$constraint->getOperator(),$constraint->getValue());
                });
            });
            return true;
        }
        // default logic should be executed otherwise
        return false;
    }

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        AcRadicadosAsignado::creating(function ($table){
            if(Auth::user()){
                $table->consecutivo  = AcRadicadosAsignado::max('consecutivo') + 1;
            }
        });

    }

}
