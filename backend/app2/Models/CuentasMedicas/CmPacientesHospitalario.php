<?php

namespace App\Models\CuentasMedicas;

use App\Models\Aseguramiento\AsAfiliado;
use App\Models\RedServicios\RsCie10;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Jedrzej\Pimpable\PimpableTrait;
use Jedrzej\Searchable\Constraint;
use OwenIt\Auditing\Contracts\Auditable;

class CmPacientesHospitalario extends Model implements Auditable
{
    use \OwenIt\Auditing\Auditable;
    use PimpableTrait;
    protected $fillable = [
        'cm_censo_id',
        'as_afiliado_id',
        'identificacion',
        'nombre_paciente',
        'consecutivo_entidad',
        'cama_servicio',
        'fecha_ingreso',
        'cod_dx',
        'nombre_diagnostico',
        'estado'
    ];
    protected $searchable = ['censo:ips_id', 'search', 'estado', 'orden'];
    protected $appends = ['tiempo_estancia','color_semaforo'];
    protected $sortable = ['estado'];

    public function censo()
    {
        return $this->belongsTo(CmCenso::class,'cm_censo_id');
    }

    public function diagnostico()
    {
        if(strlen($this->cod_dx === 3)){
            return $this->belongsTo(RsCie10::class,'cod_dx','codigo_tres');
        }

        return $this->belongsTo(RsCie10::class,'cod_dx','codigo');
    }

    public function afiliado()
    {
        return $this->belongsTo(AsAfiliado::class,'as_afiliado_id');
    }

    public function concurrencia()
    {
        return $this->belongsTo(CmConcurrencia::class, 'cm_concurrencia_id');
    }

    public function getTiempoEstanciaAttribute($key)
    {
        $fecha1 = Carbon::parse($this->attributes['fecha_ingreso']);
        $fechaActual = Carbon::now();
        $diff = $fechaActual->diffInDays($fecha1);

        return $diff;
    }

    public function getColorSemaforoAttribute ($key)
    {
        $semaforos = ['orange', 'green', 'red'];

        if ($this->tiempo_estancia <= 1) return $semaforos[1];
        if ($this->tiempo_estancia > 1 && $this->tiempo_estancia <= 4) return $semaforos[0];
        if ($this->tiempo_estancia >= 5) return $semaforos[2];
    }

    protected function processSearchFilter(Builder $builder, Constraint $constraint)
    {
        // this logic should happen for LIKE/EQUAL operators only
        if ($constraint->getOperator() === Constraint::OPERATOR_LIKE || $constraint->getOperator() === Constraint::OPERATOR_EQUAL) {
            $builder->where(function ($query) use ($constraint) {
                $query->where('nombre_paciente', $constraint->getOperator(), $constraint->getValue())
                    ->orWhere('identificacion', $constraint->getOperator(), $constraint->getValue())
                    ->orWhere('cod_dx', $constraint->getOperator(), $constraint->getValue());
            });
            return true;
        }
        // default logic should be executed otherwise
        return false;
    }

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        CmPacientesHospitalario::saving(function ($table) {
            $table->orden = [
                'Sin Asignar' => 1,
                'Asignado' => 2,
                'Cerrado' => 3
            ][$table->estado];
        });
    }
}
