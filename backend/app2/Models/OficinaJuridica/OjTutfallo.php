<?php

namespace App\Models\OficinaJuridica;

use App\Models\General\GnArchivo;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Auth;
use Jedrzej\Pimpable\PimpableTrait;
use Jedrzej\Searchable\Constraint;
use OwenIt\Auditing\Contracts\Auditable;

class OjTutfallo extends Model implements Auditable
{
    use \OwenIt\Auditing\Auditable;
    use PimpableTrait;

    protected $fillable = [
        'oj_tutela_id',
        'instancia',
        'oj_juzgado_id',
        'fecha',
        'fallo_integral',
        'tipo_fallo',
        'desc_fallo',
        'gn_archivo_id',
        'gs_usuario_id',
        'no_fallo'
    ];
    protected $hidden = ['updated_at', 'created_at'];
    protected $searchable = ['search'];

    public function tutela () {
        return $this->belongsTo(OjTutela::class,'oj_tutela_id');
    }
    public function archivo () {
        return $this->belongsTo(GnArchivo::class,'gn_archivo_id');
    }

    public function juzgado () {
        return $this->belongsTo(OjJuzgado::class,'oj_juzgado_id');
    }

    protected function processSearchFilter(Builder $builder, Constraint $constraint)
    {
        // this logic should happen for LIKE/EQUAL operators only
        if ($constraint->getOperator() === Constraint::OPERATOR_LIKE || $constraint->getOperator() === Constraint::OPERATOR_EQUAL) {
            $builder->whereHas('tutela', function ($query) use ($constraint) {
                $query->where('no_tutela', $constraint->getOperator(), $constraint->getValue())
                    ->orWhere('identificacion', $constraint->getOperator(), $constraint->getValue())
                    ->orWhere('nombre', $constraint->getOperator(), $constraint->getValue());
            })->orWhereHas('juzgado', function ($query) use ($constraint) {
                $query->where('nombre', $constraint->getValue());
            })->orWhere('fecha', $constraint->getOperator(), $constraint->getValue())
                ->orWhere('no_fallo', $constraint->getOperator(), $constraint->getValue());
            return true;
        }
        // default logic should be executed otherwise
        return false;
    }

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        OjTutfallo::creating(function ($table){
            if(Auth::user()){
                $table->gs_usuario_id  = Auth::user()->id;
            }
        });

    }

}
