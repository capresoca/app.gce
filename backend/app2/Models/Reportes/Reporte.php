<?php

namespace App\Models\Reportes;

use App\GsModulo;
use App\GsRole;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Auth;
use Jedrzej\Pimpable\PimpableTrait;
use Jedrzej\Searchable\Constraint;

class Reporte extends Model
{
    use PimpableTrait;

    protected $table = 're_reportes';

    protected $fillable = [
        'nombre',
        'sentencia',
        'descripcion',
        'gs_modulo_id',
        'gs_usuario_id'
    ];

    protected $searchable = ['search'];

    public function variables()
    {
        return $this->hasMany(Repdetalle::class, 're_reportes_id');
    }

    public function modulo()
    {
        return $this->belongsTo(GsModulo::class, 'gs_modulo_id');
    }

    public function roles()
    {
        return $this->belongsToMany(GsRole::class, 're_reproles','re_reporte_id', 'gs_role_id');

    }


    protected function processSearchFilter(Builder $builder, Constraint $constraint)
    {
        // this logic should happen for LIKE/EQUAL operators only
        if ($constraint->getOperator() === Constraint::OPERATOR_LIKE || $constraint->getOperator() === Constraint::OPERATOR_EQUAL) {
            $builder->where('descripcion', $constraint->getOperator(), $constraint->getValue())
                ->orWhere('nombre', $constraint->getOperator(), $constraint->getValue());
            return true;
        }
        // default logic should be executed otherwise
        return false;
    }

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        Reporte::creating(function ($table){
            if(Auth::user()){
                $table->gs_usuario_id  = Auth::user()->id;
            }
        });

    }

}
