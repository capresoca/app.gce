<?php

namespace App\Models\Presupuesto;

use App\Models\ContratacionEstatal\CeProconminuta;
use App\User;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Auth;
use Jedrzej\Pimpable\PimpableTrait;
use Jedrzej\Searchable\Constraint;
use OwenIt\Auditing\Contracts\Auditable;

class PrCdp extends Model implements Auditable
{
    use \OwenIt\Auditing\Auditable;

    use PimpableTrait;

    protected $fillable = [
        'periodo',
        'consecutivo',
        'fecha',
        'fecha_vence',
        'vigente',
        'objecto',
        'pr_dependencia_id',
        'pr_entidadresolucion_id',
        'gs_usuario_id',
        'gs_usuario_conf_id',
        'valor_cdp',
        'estado',
        'fecha_confirmacion',
        'pr_strgasto_id',
        'concepto_anulacionint',
        'fecha_anulacion',
        'estado_valor'
    ];

    protected $hidden = ['created_at', 'updated_at'];
    protected $searchable = ['consecutivo','search','valor_cdp','estado_valor'];
    protected $appends = ['suma_valores_ejecutados'];

    public function minuta () {
        return $this->hasOne(CeProconminuta::class, 'pr_cdp_id');
    }

    public function detalles () {
        return $this->hasMany(PrDetcdp::class, 'pr_cdp_id');
    }

    public function presupuesto_inicial_gasto () {
        return $this->belongsTo(PrStrgasto::class, 'pr_strgasto_id');
    }

    public function dependencia () {
        return $this->belongsTo(PrDependencia::class, 'pr_dependencia_id');
    }

    public function entidadResolucion ()
    {
        return $this->belongsTo(PrEntidadResolucione::class, 'pr_entidadresolucion_id');
    }

    public function usuarioConf ()
    {
        return $this->belongsTo(User::class, 'gs_usuario_conf_id');
    }

    public function scopeSinMinuta ($query)
    {
        return $query->doesntHave('minuta');
    }

    public function getFechaHumanaAttribute()
    {
        setlocale(LC_ALL, "es_ES");
        return strftime('%d de %B de %Y', strtotime($this->fecha));
    }

    public function getSumaValoresEjecutadosAttribute ()
    {
        if (count($this->detalles) <= 0) return 0;
        $suma = 0;
        foreach ($this->detalles as $detalle) {
            $suma+=$detalle['valor_ejecutado'];
        }
        return $suma;
    }

    protected function processSearchFilter(Builder $builder, Constraint $constraint)
    {
        // this logic should happen for LIKE/EQUAL operators only

        if ($constraint->getOperator() === Constraint::OPERATOR_LIKE || $constraint->getOperator() === Constraint::OPERATOR_EQUAL) {
            $builder->where(function ($query) use ($constraint) {
                $query->where('consecutivo', $constraint->getOperator(), $constraint->getValue())
                    ->orWhere('estado', $constraint->getOperator(), $constraint->getValue())
                    ->orWhere('periodo', $constraint->getOperator(), $constraint->getValue())
                    ->orWhere('objecto', $constraint->getOperator(), strtoupper($constraint->getValue()))
                    ->orWhere('estado_valor', $constraint->getOperator(), $constraint->getValue());
            });
            return true;
        }
        // default logic should be executed otherwise
        return false;
    }


    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        PrCdp::creating(function ($table){
            if(Auth::user()){
                $table->gs_usuario_id = Auth::user()->id;
                $table->consecutivo  = PrCdp::max('consecutivo') + 1;
            }
        });

    }
}
