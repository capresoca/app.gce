<?php

namespace App\Models\Presupuesto;

use App\Models\Niif\GnTercero;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Auth;
use Jedrzej\Pimpable\PimpableTrait;
use Jedrzej\Searchable\Constraint;
use OwenIt\Auditing\Contracts\Auditable;

class PrObligacione extends Model implements Auditable
{
    use \OwenIt\Auditing\Auditable;
    use PimpableTrait;

    protected $fillable = [
        'periodo',
        'vigencia',
        'consecutivo',
        'documento',
        'observaciones',
        'fecha',
        'fecha_documento',
        'fecha_vencimiento',
        'valor_obligacion',
        'estado',
        'pr_entidad_resolucion_id',
        'gs_usuario_id',
        'gn_tercero_id',
        'concepto_anulacionint',
        'fecha_anulacion',
        'pg_cxp_id'
    ];
//    protected $hidden = ['created_at', 'updated_at'];
    protected $searchable = ['search'];

    public function detalles ()
    {
        return $this->hasMany(PrDetobligacione::class, 'pr_obligacion_id');
    }

    public function entidadResolucion ()
    {
        return $this->belongsTo(PrEntidadResolucione::class, 'pr_entidad_resolucion_id');
    }

    public function tercero ()
    {
        return $this->belongsTo(GnTercero::class, 'gn_tercero_id');
    }

    protected function processSearchFilter(Builder $builder, Constraint $constraint)
    {
        // this logic should happen for LIKE/EQUAL operators only

        if ($constraint->getOperator() === Constraint::OPERATOR_LIKE || $constraint->getOperator() === Constraint::OPERATOR_EQUAL) {
            $builder->whereHas('tercero', function ($query) use ($constraint) {
                $query->where('identificacion', $constraint->getOperator(), $constraint->getValue())
                    ->orWhere('nombre1', $constraint->getOperator(), $constraint->getValue())
                    ->orWhere('nombre2', $constraint->getOperator(), $constraint->getValue())
                    ->orWhere('apellido1', $constraint->getOperator(), $constraint->getValue())
                    ->orWhere('apellido2', $constraint->getOperator(), $constraint->getValue());
            })->whereHas('entidadResolucion', function ($query) use ($constraint) {
                    $query->where('nombre', $constraint->getOperator(), $constraint->getValue())
                        ->orWhere('resolucion', $constraint->getOperator(), $constraint->getValue())
                        ->orWhere('codigo', $constraint->getOperator(), $constraint->getValue());
            })->orWhere('consecutivo', $constraint->getOperator(), $constraint->getValue())
                ->orWhere('valor_obligacion', $constraint->getOperator(), $constraint->getValue())
                ->orWhere('observaciones', $constraint->getOperator(), $constraint->getValue())
                ->orWhere('fecha', $constraint->getOperator(), $constraint->getValue())
                ->orWhere('fecha_documento', $constraint->getOperator(), $constraint->getValue())
                ->orWhere('estado', $constraint->getOperator(), $constraint->getValue())
                ->orWhere('documento', $constraint->getOperator(), $constraint->getValue());
            return true;
        }
        // default logic should be executed otherwise
        return false;
    }

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        PrObligacione::creating(function ($table){
            if(Auth::user()){
                $table->gs_usuario_id = Auth::user()->id;
            }
            $table->consecutivo  = PrObligacione::max('consecutivo') + 1;
        });

    }
}
