<?php

namespace App\Models\Presupuesto;

use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Auth;
use Jedrzej\Pimpable\PimpableTrait;
use Jedrzej\Searchable\Constraint;
use OwenIt\Auditing\Contracts\Auditable;

class PrTraslado extends Model implements Auditable
{
    use \OwenIt\Auditing\Auditable;
    use PimpableTrait;

    protected $fillable = [
        'concepto_anulacion',
        'consecutivo_presupuestal',
        'documento',
        'estado',
        'fecha',
        'gs_usuario_id',
        'fecha_anulacion',
        'observaciones',
        'periodo',
        'pr_strgasto_id',
        'pr_stringreso_id',
        'tipo'
    ];

    protected $searchable = ['tipo','estado','search'];

    public function detalles ()
    {
        return $this->hasMany(PrDetallesTraslado::class, 'pr_traslado_id');
    }

    public function presupuesto_inicial_gasto () {
        return $this->belongsTo(PrStrgasto::class, 'pr_strgasto_id');
    }

    public function presupuesto_inicial_ingreso () {
        return $this->belongsTo(PrStringreso::class, 'pr_stringreso_id');
    }

    protected function processSearchFilter(Builder $builder, Constraint $constraint)
    {
        // this logic should happen for LIKE/EQUAL operators only

        if ($constraint->getOperator() === Constraint::OPERATOR_LIKE || $constraint->getOperator() === Constraint::OPERATOR_EQUAL) {
            $builder->where(function ($query) use ($constraint) {
                $query->where('documento', $constraint->getOperator(), $constraint->getValue())
                    ->orWhere('consecutivo_presupuestal', $constraint->getOperator(), $constraint->getValue())
                    ->orWhere('estado', $constraint->getOperator(), $constraint->getValue());
            });
//                ->orWhere('tipo', $constraint->getOperator(), $constraint->getValue());
            return true;
        }
        // default logic should be executed otherwise
        return false;
    }

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        PrTraslado::creating(function ($table){
            if(Auth::user()){
                $table->gs_usuario_id = Auth::user()->id;
                if ($table->tipo === 'Ingreso') {
                    $table->consecutivo_presupuestal  = PrTraslado::where('tipo','=','Ingreso')->max('consecutivo_presupuestal') + 1;
                } elseif ($table->tipo === 'Gasto') {
                    $table->consecutivo_presupuestal  = PrTraslado::where('tipo','=','Gasto')->max('consecutivo_presupuestal') + 1;
                }
            }
//            PrModPresupuestale::max('consecutivo_presupuestal');
        });

    }
}
